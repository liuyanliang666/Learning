// 下滤操作：维护以 root 为根的子树为大顶堆
void siftdown(vector<int>& heap, int root, int size) {
    while (2 * root + 1 < size) {
        int child = 2 * root + 1;
        if (child + 1 < size && heap[child] < heap[child + 1]) {
            child++;  // 找到左右节点中的最大值
        }
        if (heap[root] < heap[child]) {
            swap(heap[root], heap[child]);
            root = child;
        } else {
            break;
        }
    }
}

// 构建大顶堆
void buildHeap(vector<int>& heap) {
    int n = heap.size();
    for (int i = n / 2 - 1; i >= 0; --i) {
        siftdown(heap, i, n);
    }
}

void heap_sort(vector<int>& v, int n){
    buildHeap(v);
    for(int m = n - 1; m > 0; m--){
        swap(v[0], v[m]);
        siftdown(v, 0, m);
    }
}
