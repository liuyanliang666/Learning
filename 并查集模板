#include <bits/stdc++.h>
using namespace std;

// 带路径压缩的 find
int find(int x, vector<int>& parent) {
    if (parent[x] != x)
        parent[x] = find(parent[x], parent);
    return parent[x];
}

// 合并两个集合
void unite(int x, int y, vector<int>& parent, vector<int>& size) {
    int rootX = find(x, parent);
    int rootY = find(y, parent);
    if (rootX != rootY) {
        parent[rootY] = rootX; // 让 rootY 挂到 rootX 下
        size[rootX] += size[rootY]; // 更新集合大小
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    
    vector<int> parent(n + 1);
    vector<int> size(n + 1, 1); // 每个集合初始大小为 1

    for (int i = 1; i <= n; ++i)
        parent[i] = i; // 初始化父节点

    while (m--) {
        int number;
        cin >> number;
        vector<int> group(number);
        for (int i = 0; i < number; ++i) {
            cin >> group[i];
        }
        for (int i = 1; i < number; ++i) {
            unite(group[0], group[i], parent, size); // 把同一组的元素合并
        }
    }

    // 最后找最大集合大小
    int mx = 0;
    for (int i = 1; i <= n; ++i) {
        if (find(i, parent) == i) { // 只看根节点
            mx = max(mx, size[i]);
        }
    }
    cout << mx << endl;
}
