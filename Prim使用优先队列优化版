#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

struct Node {
    int to;
    int weight;
    int from;  // 加入来源节点
    bool operator<(const Node& other) const {
        return weight > other.weight;  // 最小堆
    }
};

int PrimMatrixWithParent(int n, vector<vector<int>>& graph, vector<int>& parent) {
    vector<bool> visited(n + 1, false);
    priority_queue<Node> pq;
    int totalCost = 0;

    parent.assign(n + 1, -1);
    pq.push({1, 0, -1});  // 起点是 1，权重为 0，无父节点

    while (!pq.empty()) {
        Node cur = pq.top(); pq.pop();
        int u = cur.to;
        int w = cur.weight;
        int p = cur.from;

        if (visited[u]) continue;

        visited[u] = true;
        totalCost += w;
        parent[u] = p;

        for (int v = 1; v <= n; ++v) {
            if (!visited[v] && graph[u][v] != INT_MAX) {
                pq.push({v, graph[u][v], u});  // 记录边的来源 u -> v
            }
        }
    }

    // 检查是否是连通图
    for (int i = 1; i <= n; ++i) {
        if (!visited[i]) return -1;
    }

    return totalCost;
}
