class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto& v : times) {
            graph[v[0]].emplace_back(v[1], v[2]);
        }

        vector<int> dist(n + 1, INT_MAX);  // 记录每个结点到源点的最短距离
        vector<bool> visited(n + 1, 0);
        dist[k] = 0;

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.emplace(0, k);

        while (!pq.empty()) {
            auto [curDist, u] = pq.top();  // curDist是当前堆中距离源点最短的距离
            pq.pop();

            if (visited[u]) continue;
            
            visited[u] = true;
            for (auto& [v, w] : graph[u]) {
                if (!visited[v] && dist[v] > curDist + w) {
                    dist[v] = curDist + w;
                    pq.emplace(dist[v], v);
                }
            }
        }

        int ans = *max_element(dist.begin() + 1, dist.end());  // 找到dist数组的最大值
        return ans == INT_MAX ? -1 : ans;
    }
};



//相同风格的Prim算法
class Solution {
public:
    int primMST(int n, vector<vector<int>>& edges) {
        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto& e : edges) {
            int u = e[0], v = e[1], w = e[2];
            graph[u].emplace_back(v, w);
            graph[v].emplace_back(u, w);  // 因为 Prim 是无向图
        }

        vector<bool> visited(n + 1, false);
        vector<int> dist(n + 1, INT_MAX);  // 到当前生成树的最短边
        dist[1] = 0;  // 从结点 1 开始（也可以换成其他起点）

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.emplace(0, 1);  // (边权，节点)

        int totalWeight = 0;

        while (!pq.empty()) {
            auto [w, u] = pq.top();
            pq.pop();

            if (visited[u]) continue;
            visited[u] = true;
            totalWeight += w;

            for (auto& [v, weight] : graph[u]) {
                if (!visited[v] && weight < dist[v]) {
                    dist[v] = weight;
                    pq.emplace(weight, v);
                }
            }
        }

        // 检查是否所有节点都被访问，判断图是否连通
        for (int i = 1; i <= n; ++i) {
            if (!visited[i]) return -1;  // 图不连通，无法生成 MST
        }

        return totalWeight;
    }
};
